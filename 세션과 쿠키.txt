■■■ 세션(Session)과 쿠키(Cookie) ■■■

○ 쿠키(Cookie) - 클라이언트에 보관

   - 쿠키는 클라이언트에 대한 정보를 클라이언트의 하드디스크에 
     작은 파일 형태로 저장한 text 파일로 
     서버에서 사용자에게 편리한 기능을 제공하기 위해 많이 사용되고,
     쿠키는 웹 브라우저에 의해 관리된다.

   - 쿠키는 텍스트 형태로 저장되기 때문에 변조나 복사 등이 가능하여 보안성이 없고
     클라이언트에.. 예전에는 총 300개 까지 저장 가능했으며,
     각 도메인 당 갯수 제한(20개)이나 크기 제한(4096Byte)은 사실상 무의미해져 가고 있다.
     
   - 저장되는 위치는 시스템(운영체제)이나 브라우저에 따라 다르며
     일반적인 형식(계정명@도메인)도 꾸준히 바뀌어 가고 있다.

   - 쿠키는 웹 브라우저가 거쳐간 웹 사이트 및 개인의 정보가 기록되기 때문에
     개인의 사생활을 침해할 소지가 있으며,
     이로 인한 보안 문제를 유발하기 때문에 일반적으로 웹 브라우저 자체에
     쿠키 거부 기능이 포함되어 있다.
     하지만, 쿠키 거부 기능을 설정하게 되면 웹 브라우저와의 연결을 
     지속시키지 못하기 때문에 문제가 발생한다.
     (사실상 거부하는 의미가 없음... 반 강제적)
     
   - 쿠키의 동작 방식
     쿠키의 동작 방식은 웹 서버와 웹 브라우저 간의 상호 협력으로 이루어진다.
     웹 서버가 웹 브라우저의 요청에 응답할 때 
     HTTP 프로토콜에 있는 HTTP 헤더에 쿠키 정보를 포함시켜 클라이언트 쪽으로 보낸다.
     그리고 웹 브라우저가 웹 서버에 존재하는 페이지를 요구할 때
     그 전에 자신이 방문했을 때 해당 페이지에 대해 웹 서버가 웹 브라우저 쪽으로
     심어놓은 쿠키를 웹 서버로 다시 건네주어서 
     이전 상태를 웹 서버가 알 수 있도록 한다.

   - 쿠키(객체)의 파라미터(속성)
     · name=value
       : 쿠키는 반드시 이름을 포함해야 한다.
         이름은 변수명과 같은 목적으로 사용된다.
     · expires=date
       : 유효기간을 지정한다.
         날짜를 생략할 경우 브라우저의 종료 시점까지 쿠키가 남아있게 된다.
	 유효기간 설정은 그리니치 표준시(Wdy, DD-Mon-TT HH:MM:SS GNT)로
	 설정하게 된다.
     · path=path
       : 웹 서버에서 쿠키 값이 디렉터리 간에 유효한 범위를 설정하는 것으로
         path 값은 웹 서버의 document root 를 기준으로 설정한다.
	 예를 들어... path 가 『/』이면 (『"path=/;"』) 도메인의 루트(/)에서 시작하는
	 모든 곳을 접속할 때 해당 쿠키의 값을 적용할 수 있다.
	 생략할 경우 현재 문서의 위치와 디렉터리와 하위 디렉터리가 쿠키의 범위가 된다.
     · domain=domain
       : 한 사이트에서 만든 쿠키가 다른 사이트에 영향을 주지 않기 때문에
         도메인 항목이 필요하다.
	 도메인은 자동으로 사이트의 기본 도메인으로 설정된다.
     · secure
       : 데이터의 전송에 보안이 요구되는지를 지정한다.
         true 는 브라우저가 안전하다고 판단하는 서버만 나타나게 된다.
	 기본값(default)은 false 이다.
    
    - 쿠키의 기본 설정
      ① Cookie 객체 설정
	 Cookie c = new Cookie("쿠키이름", "쿠키값");
      ② Cookie 객체 설정
         c.setMaxAge(쿠키유효시간 초 단위 설정);
      ③ Cookie 객체 등록(추가)
         response.addCookie(c);

    - JSP 에서 쿠키를 설정하는 방법은 두 가지가 있다.
      첫 번째 방법은
      『response』객체에 『setHeader()』 메소드를 이용하여 쿠키를 설정하는 것이다.
      하지만, 권장하지 않는다.
      ex) resonse.setHeader("set_cookie", "name=value, expire=value, ...");
          // 이 방법은...
          // Header 에 key 와 값, Key 와 값, .. 을 String Type 으로 넘기는
          // 것이기 때문에 엄밀히 말하자면 쿠키라는 객체를 넘기는 것이 아니다.
          // 과거에는 쿠키라는 클래스가 존재하지 않았기 때문에
          // 이 방법을 이용했었다.

      두 번째 방법은
      『Cookie』 클래스를 이용하는 방법이다.
      · String getComment()
        : 쿠키에 대한 설명을 가져온다.
      · String getDomain()
        : 쿠키와 유효한 도메인 정보를 가져온다.
      · int getMaxAge()
        : 쿠키의 유효한 시간 정보를 가져온다.
      · String getName()
        : 쿠키의 이름을 가져온다.
      · String getPath()
        : 쿠키의 유효한 디렉터리 정보를 가져온다.
      · String getSecure()
        : 쿠키의 보안 설정값을 가져온다.
      · String getValue()
        : 쿠키의 해당 값을 가져온다.
      · int getVersion()
        : 쿠키의 버전 값을 가져온다.
      · void setComment(String purpose)
        : 쿠키에 대한 설명을 설정한다.
      · void setDomain(String pattern)
        : 쿠키가 유효한 도메인 정보를 설정한다.
      · void setMaxAge(int expiry)
        : 쿠키가 유효한 시간 정보를 설정한다.
      · void setSecure(String url)
        : 쿠키의 보안 설정값을 구성한다.
       ·void setValue(String newValue)
        : 쿠키에 해당 값을 설정한다.
      · void setVersion(int v)
        : 쿠키의 버전값을 설정한다.
    
    - JSP 에서 쿠키 유효시간 설정
      『setMaxAge(int expiry)』 메소드를 통해 유효시간을 설정한다.
      · 『expiry』가 『음수』일 때 
        : 브라우저가 종료되면 쿠키가 제거된다.
      · 『expiry』가 『0』일 때
        : 생성과 동시에 쿠키가 제거된다.(생성하자마자 없애버린다.)
      · 『expiry』가 『양수』 일 때
        : 초 단위로 해당 시간만큼 쿠키가 유지된다.
      · 『setMaxAge()』 메소드를 통해 유효시간을 설정하지 않은 경우
        기본적으로 음수가 설정되어 브라우저가 종료될 때까지 쿠키가 유지된다.


○ 세션(Session) - 서버쪽에 보관

   - 쿠키의 경우 브라우저에 상태를 유지하기 위한 정보를 저장하지만
     (즉, 로컬 PC 의 하드디스크에 저장)
     세션은 웹 서버의 웹 컨테이너에 상태를 유지하기 위한 정보를 저장하는 것으로
     『javax.servlet.http』패키지의 『HttpSessio』인터페이스를 통해
     세션을 사용하게 된다.
     또한 세션은 서버와 관련된 정보를 노출하지 않기 때문에
     쿠키를 사용하는 것보다 『HttpSession』 인터페이스의 세션을 통하 상태 관리가
     보다 안정적(보안성 향상)이라 할 수 있다.

   - Session 생성
     Session 을 생성하기 위해서는 페이지 디렉티브(page directive)의
     Session 속성을 true 로 설정한다.
     (별도로 설정하지 않아도 자동으로 기본값 적용. 
      즉, 사용하지 않을 경우에만 false 설정.)
     ex) <%@ page session="true%">

   - Session 내장 객체의 주요 메소드
     · String getId()
       : Session 의 고유 ID 값을 구한다.
         (『세션 아이디』라고 한다. 세션 고유 ID를 문자열 형태로 반환한다.)
     · long getCreationTime()
       : 세션이 생성된 시간을 구한다.
         (시간은 1970년 1월 1일 이후 흘러간 시간을 의미한다.)
     · int getLastAccessedTime()
       : 웹 브라우저가 가장 마지막에 세션에 접근한 시간을 구한다.
     · int getMaxInactiveInterval()
       : 세션 유지 시간을 초로 반환한다. 기본값은 30분으로 지정된다.
     · void setMaxInactiveInterval(int interval)
       : 세션을 유지할 시간을 interval 에 설정된 초 값으로 설정한다.
     · void invalidate()
       : 현재 세션을 종료한다.
         세션과 관련된 모든 값을 삭제한다. 
     · boolean isNes()
       : 클라이언트 『세션 아이디』를 할당하지 않은 경우 『true』값을 반환한다.
         새로운 세션인지의 여부를 확인할 때 사용한다.
     · void setAttribute(String key, Object value)
       : 주어진 key 속성의 값을 value 로 지정한다.
     · Object getAttribute(String key)
       : 주어진 key 속성의 값을 얻어낸다.
     · void removeAttribute(String key)
       : 주어진 key 속성의 값을 제거한다.

    - 한 번 생성된 세션은 종료하기 전까지 지속적으로 유지된다.
      (중간에 사라지지 않음)
      단, 은행 인터넷 뱅킹 이용 시 로그인이 풀리는 것과 같은 이유는
      임의로 설정을 해두었기 때문이다.
      이와 같은 성격으로 웹 어플리케이션을 실행하는 동안
      지속적으로 사용하는 데이터의 저장 장소로 세션이 적합(적당)하다.

      C:\Users\sist\AppData\Local\Google\Chrome\User Data\Default\Cache

※ 참고

   - 스코프(scope) → 대부분의 교재에서 life cycle(생명주기)로 설명함.
     웹 어플리케이션은 page, request, session, application 이라는
     4개의 영역(객체)을 가지고 있으며 
     기본 객체의 영역은 '객체의 유효기간' 이라고도 불리며,
     객체를 누구와 공유할 것인가를 나타낸다.

     · page 영역
       한 번의 웹 브라우저(클라이언트)의 요청에 대해 하나의 JSP 페이지가 호출되며
       웹 브라우저 요청이 들어오면 이 때... 단 한 개의 페이지만 대응된다.

     · request 영역
       한 번의 웹 브라우저(클라이언트)의 요청에 대해
       같은 요청을 공유하는 페이지가 대응되며
       웹 브라우저의 한 번의 요청이 단지 한 개의 페이지만 요청될 수 있고
       같은 request 영역이면 두 개의 페이지가 같은 요청을 공유한다.
       (include 액션 태그, forward 액션 태그 사용 시)

     · session 영역
       하나의 '웹 브라우저 당 한 개' 의 Session 객체가 생성된다.
       같은 웹 브라우저 내에서는 요청되는 페이지들이 같은 객체를 공유한다.
      
     · application 영역
       하나의 '웹 어플리케이션 당 한 개' 의 application 객체가 생성된다.
       대부분의 환경 설정에서 사용된다.
       같은 웹 어플리케이션에 요청되는 페이지들은 같은 객체를 공유한다.

○ <jsp:useBean>

   <jsp:useBean> 액션 태그는 
   자바 객체를 생성하거나 기존에 만들어져 있는 객체를 반환한다.

   <jsp:useBean id="name" scope="page|request|session|application" typeSpec />

   - id 속성
     객체 인스턴스를 식별하는 이름으로 대소문자를 엄격히 구분한다.
     한 번 생성된 Bean 이 소멸할 때 까지는 같은 id 를 중복해서 사용할 수 없다.
   
   - scope 속성
     객체 참조 번위로 기본값(default)은 page 이다.
     · page
       객체 참조는 service() 호출이 종료될 때 소멸.
     · request
       HttpServletRequest 객체가 소멸되지 않는 한 존재하며,
       컨테이너에 의해 생성된 서블릿은
       HttpServletRequest 의 setAttribute() 메소드를 이용하여
       객체를 HttpServletRequest 에 바인딩시킨다.
     · session
       객체는 클라이언트의 요청과 구별되며, session 이 살아있는 동안에 존재하며,
       컨테이너에 의해 생성된 서블릿은
       HttpSession 의 putValue(String key, Object value) 메소드를 이용하여
       객체를 HttpSession 에 바인딩 시킨다.
     · application 
       가장 수명(생명주기)이 길다.
       ServletContext 의 setAttribute() 를 통해
       객체를 ServletContext 에 바인딩 시킨다.
     
    - typeSpec 속성
      class="class_name" |
      class="class_name" type="type_name" |
      type="type_name" class="class_name" |
      beanName ="bean_name" type="type_name" |
      type="type_name" beanName="bean_name"  |
      type="type_name"

      · class
        완전한 형태의 클래스 이름으로
	beanName 이 정의되어 있지 않은 상황이라면 반드시 정의해야 한다.   
      · beanName
        java.beans.Beans 클래스의 instantiate() 메소드에 사용할 bean 이름으로
	type 과 beanName 을 지정한 경우에는 class 를 생략할 수 있다.
	주로 class 인자를 쓰지 않을 경우 사용한다.
	내부적으로 컨테이너는 id 와 scope 를 이용해서 객체를 찾는다.
	이 과정에서 만약 찾지 못할 경우 현재 클래스 로더로 instantiate()
	메소드를 호출하는데, 이 때 bean 의 이름을 인자로 전달한다.
	이 인스턴스의 생성이 실패하게 되면 예외가 발생한다.
      · type
        클래스의 형(Type)을 지정하는, 생략 가능한 특성이다.
	객체가 이 특성으로 지정된 형(Type)이 아닐 경우
	ClassCastException 예외가 발생하게 된다.

     <jsp:useBean id="name" scope="page" typeSpec>
     	 <jsp:setProperty name="bean_name" prop_expr />
	 <%
	      스크립트릿을 이용하여 다른 속성 값을 호출하는 기능을 가진
	      함수를 호출할 수도 있다.
	 %>
     </jsp:useBean>

○ <jsp:setProperty>

   <jsp:setProperty> 액션 태그는 자바 빈에 속성 값을 할당한다.
   name 속성에 기술된 이름에 해당하는 bean 클래스는 
   <jsp:useBean> 액션 태그를 이용해서 이 액션이 나타나기 전에 미리 정의되어야 한다.

   <jsp:setProperty name="bean_name" prop_expr />

   - name 속성 
     <jsp:useBean> 액션 태그에 의해 정의된 bean 인스턴스 이름

   - prop_expr
     property="*" |
     property="property_name" |
     property="property_name" param="parameter_name" |
     property="property_name" value="parameter_value"

     · property
       값을 설정하고자 하는 bean 속성의 이름으로 
       『"*"』으로 설정하면 ServletRequest 안의 모든 인자들 중
       bean 속성과 데이터 타입이 일치하는 것을 찾아서
       각각의 속성들을 각각의 인자들의 값으로 설정한다.
       값이 『""』인 경우 속성은 변하지 않는다.
     · param
       bean 속성에 설정하고자 하는 값을
       파라미터에서 지정하고자 할 경우 사용한다.
     · value
       bean 속성에 설정할 값을 지정하며
       하나의 <jsp:setProperty> 액션 태그가 param 과 value 를 동시에 가질 수 없다.
  
 ○ <jsp:getProperty>
   
    <jsp:getProperty> 액션 태그는 bean 의 속성 값을 얻는데 사용한다.
    bean 의 속성 값을 얻어 String 으로 변환한 다음 출력 스트림으로 보낸다.

    <jsp:getProperty name="name" property="property_name">

    - name 속성
      속성을 얻고자 하는 bean 의 인스턴스 이름
    
    - property 속성
      얻고자 하는 속성의 이름